name: Build and release binaries

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git REF to use for manual pre-release"
        required: true
        type: string
      prerelease_suffix:
        description: "Suffix which has been used for manual pre-release name"
        required: false
        type: string
        default: "notag"
      release_macos_amd64:
        description: "Release for MacOS amd64?"
        required: false
        type: boolean
        default: true
      release_macos_arm64:
        description: "Release for MacOS arm64?"
        required: false
        type: boolean
        default: true
      release_linux_amd64:
        description: "Release for Linux amd64?"
        required: false
        type: boolean
        default: true
      release_linux_arm64:
        description: "Release for Linux arm64?"
        required: false
        type: boolean
        default: true
      release_windows_amd64:
        description: "Release for Windows amd64?"
        required: false
        type: boolean
        default: true
  push:
    tags:
      - "*.*.*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: "MacOS x86"
            runner: macos-12-large
            release-suffix: macosx-amd64
            required: ${{ github.event.inputs.release_macos_amd64 }}
          - name: "MacOS arm64"
            runner: [self-hosted, macOS, ARM64]
            release-suffix: macosx-arm64
            required: ${{ github.event.inputs.release_macos_arm64 }}
          - name: "Linux x86"
            runner: matterlabs-ci-runner
            image: matterlabs/llvm_runner:ubuntu22-llvm17-latest
            target: "x86_64-unknown-linux-musl"
            release-suffix: linux-amd64-musl
            required: ${{ github.event.inputs.release_linux_amd64 }}
          - name: "Linux ARM64"
            runner: matterlabs-ci-runner-arm
            image: matterlabs/llvm_runner:ubuntu22-llvm17-latest
            target: "aarch64-unknown-linux-musl"
            release-suffix: linux-arm64-musl
            required: ${{ github.event.inputs.release_linux_arm64 }}
          - name: "Windows"
            runner: windows-2022-github-hosted-16core
            release-suffix: windows-amd64-gnu
            required: ${{ github.event.inputs.release_windows_amd64 }}
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.image || '' }} # Special workaround to allow matrix builds with optional container
    name: ${{ matrix.name }}
    steps:
      - name: Checkout source
        if: matrix.required == 'true'
        uses: actions/checkout@v4

      - name: Prepare Windows env
        if: matrix.required == 'true' && runner.os == 'Windows'
        uses: matter-labs/era-compiler-ci/.github/actions/prepare-msys@main

      - name: Build LLVM
        if: matrix.required == 'true'
        uses: matter-labs/era-compiler-ci/.github/actions/build-llvm@main
        with:
          target-env: 'musl'
          enable-assertions: 'false'

      - name: Build zksolc
        if: matrix.required == 'true'
        uses: ./.github/actions/build
        with:
          target: ${{ matrix.target }}
          release-suffix: ${{ matrix.release-suffix }}

  prepare-release:
    name: Prepare release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || '' }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release*
          path: releases

      - name: Identify release name
        id: release
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            git config --global --add safe.directory $GITHUB_WORKSPACE
            VERSION_OR_SHA=$(git rev-parse --short HEAD)
            echo "version_or_sha=${VERSION_OR_SHA}" >> $GITHUB_OUTPUT
            echo "release_title=prerelease-${VERSION_OR_SHA}-${{ github.event.inputs.prerelease_suffix }}" >> $GITHUB_OUTPUT
          else
            VERSION_OR_SHA="${GITHUB_REF#refs/tags/}"
            echo "version_or_sha=${VERSION_OR_SHA}" >> $GITHUB_OUTPUT
            echo "release_title=${VERSION_OR_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Publish release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          tree ./releases
          BINARIES=($(find ./releases -type f))
          [ "${GITHUB_EVENT_NAME}" = "workflow_dispatch" ] && TARGET_PARAM="--target ${{ github.event.inputs.ref }}"
          gh release create ${{ steps.release.outputs.version_or_sha }} \
            --title ${{ steps.release.outputs.release_title }} \
            --prerelease ${TARGET_PARAM} \
            "${BINARIES[@]}"

      - name: Get changelog
        if: github.ref_type == 'tag'
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_level: warn
          path: ./CHANGELOG.md

      - name: Prepare CHANGELOG for publishing
        id: prepare_changelog
        if: github.ref_type == 'tag'
        run: |
          echo "## ${{ github.event.repository.name }}" >> ./release_changelog.md
          echo "## [${{ steps.changelog_reader.outputs.version }}] - ${{ steps.changelog_reader.outputs.date }}" >> ./release_changelog.md
          echo '${{ steps.changelog_reader.outputs.changes }}' >> ./release_changelog.md
          echo "changes=$(sed -z 's/\n/\\n/g' ./release_changelog.md)" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        if: github.ref_type == 'tag'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "${{ steps.prepare_changelog.outputs.changes }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_RELEASES }}
