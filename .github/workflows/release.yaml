name: Build and release binaries

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git REF to use for manual pre-release. Keep it empty to use the workflow branch."
        required: false
        type: string
      prerelease_suffix:
        description: "Suffix which has been used for manual pre-release name"
        required: false
        type: string
        default: "notag"
      release_macos_amd64:
        description: "Release for MacOS amd64?"
        required: false
        type: boolean
        default: true
      release_macos_arm64:
        description: "Release for MacOS arm64?"
        required: false
        type: boolean
        default: true
      release_linux_amd64:
        description: "Release for Linux amd64?"
        required: false
        type: boolean
        default: true
      release_linux_arm64:
        description: "Release for Linux arm64?"
        required: false
        type: boolean
        default: true
      release_windows_amd64:
        description: "Release for Windows amd64?"
        required: false
        type: boolean
        default: true
  push:
    tags:
      - "*.*.*"


jobs:

  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare-matrix.outputs.matrix }}
    steps:
      - name: Prepare matrix
        id: prepare-matrix
        run: |
          # Define general matrix parameters
          WINDOWS='{"name":"Windows","runner":"windows-2022-github-hosted-64core","release-suffix":"windows-amd64"}'
          MACOS_AMD64='{"name":"MacOS-x86","runner":"macos-12-large","release-suffix":"macosx-amd64"}'
          MACOS_ARM64='{"name":"MacOS-arm64","runner":["self-hosted","macOS","ARM64"],"release-suffix":"macosx-arm64"}'
          LINUX_AMD64='{"name":"Linux-AMD64","runner":"matterlabs-ci-runner","image":"matterlabs/llvm_runner:ubuntu22-llvm17-latest","target":"x86_64-unknown-linux-musl","release-suffix":"linux-amd64-musl"}'
          LINUX_ARM64='{"name":"Linux-ARM64","runner":"matterlabs-ci-runner-arm","image":"matterlabs/llvm_runner:ubuntu22-llvm17-latest","target":"aarch64-unknown-linux-musl","release-suffix":"linux-arm64-musl"}'
          # Disable platforms for non-tag builds if user requested
          if [ ${GITHUB_REF_TYPE} != tag ]; then
            [ ${{ github.event.inputs.release_windows_amd64 }} != true ] && WINDOWS=
            [ ${{ github.event.inputs.release_macos_amd64 }} != true ] && MACOS_AMD64=
            [ ${{ github.event.inputs.release_macos_arm64 }} != true ] && MACOS_ARM64=
            [ ${{ github.event.inputs.release_linux_amd64 }} != true ] && LINUX_AMD64=
            [ ${{ github.event.inputs.release_linux_arm64 }} != true ] && LINUX_ARM64=
          fi
          PLATFORMS=(${WINDOWS} ${MACOS_AMD64} ${MACOS_ARM64} ${LINUX_AMD64} ${LINUX_ARM64})
          echo "matrix={ \"include\": [ $(IFS=, ; echo "${PLATFORMS[*]}") ] }" | tee -a "${GITHUB_OUTPUT}"

  build:
    needs: prepare-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.image || '' }} # Special workaround to allow matrix builds with optional container
    name: ${{ matrix.name }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || '' }}

      - name: Prepare Windows env
        if: runner.os == 'Windows'
        uses: matter-labs/era-compiler-ci/.github/actions/prepare-msys@v1

      - name: Build LLVM
        uses: matter-labs/era-compiler-ci/.github/actions/build-llvm@v1
        with:
          target-env: 'musl'
          enable-assertions: 'false'

      - name: Build zksolc
        uses: ./.github/actions/build
        with:
          target: ${{ matrix.target }}
          release-suffix: ${{ matrix.release-suffix }}

  prepare-release:
    name: Prepare release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || '' }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release*
          path: releases

      - name: Identify release name
        id: release
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION_OR_SHA=$(git rev-parse --short HEAD)
            echo "version_or_sha=${VERSION_OR_SHA}" >> $GITHUB_OUTPUT
            echo "full_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            echo "release_title=prerelease-${VERSION_OR_SHA}-${{ github.event.inputs.prerelease_suffix }}" >> $GITHUB_OUTPUT
          else
            VERSION_OR_SHA="${GITHUB_REF#refs/tags/}"
            echo "version_or_sha=${VERSION_OR_SHA}" >> $GITHUB_OUTPUT
            echo "release_title=${VERSION_OR_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Get changelog
        if: github.ref_type == 'tag'
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_level: warn
          path: ./CHANGELOG.md

      - name: Prepare release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.release.outputs.release_title }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          generate_release_notes: false
          tag_name: ${{ steps.release.outputs.version_or_sha }}
          target_commitish: ${{ steps.release.outputs.full_sha }}
          prerelease: true
          files: releases/**/**
